=========
Braceless
=========

def main : IO UInt32 := do
  IO.println "hello"
  IO.println "world"

---

(source_file
  (def (identifier) (apply (identifier) (identifier))
    (do
      (apply (field_of (identifier) (identifier)) (string))
      (apply (field_of (identifier) (identifier)) (string)))))

========
Repeated
========

def main : IO UInt32 := do do
  IO.println "hello"
  IO.println "world"

---

(source_file
  (def (identifier) (apply (identifier) (identifier))
    (do (do)
      (apply (field_of (identifier) (identifier)) (string))
      (apply (field_of (identifier) (identifier)) (string)))))

===
Let
===

def f : Unit := do
  let c <- 2
  let d ← 2
  let e := 2

---

(source_file
  (def (identifier) (identifier)
    (do
      (let (identifier) (number))
      (let (identifier) (number))
      (let (identifier) (number)))))

===========
Let Mutable
===========

def bar : Unit := do
  let mut s := 0

---

(source_file
  (def
    name: (identifier)
    return_type: (identifier)
    body:
      (do
        (let
          (mutable_specifier)
          name: (identifier)
          body: (number)))))

========
For Loop
========

def foo (xs : Array Nat) : Unit := do
  let mut s := 0
  for x in xs do
    s := s + x

---

(source_file
  (def
    name: (identifier)
    parameters:
      (parameters
        name: (identifier)
        type:
          (apply
            name: (identifier)
            arguments: (identifier)))
    return_type: (identifier)
    body:
      (do
        (let
          (mutable_specifier)
          name: (identifier)
          body: (number))
        (for_in
          name: (identifier)
          iterable: (identifier)
          body:
            (do))
              (assign
                name: (identifier)
                value: (binary_expression (identifier) (identifier))))))

=========
Try/Catch
=========

def f : IO Unit := do
  try
    println! "foo"
  catch ex =>
    throw ex

---

(source_file
  (def (identifier) (apply (identifier) (identifier))
    (do
      (try
        (apply (identifier) (string))
        (catch (identifier)
          (throw (identifier)))))))

=========
Empty Try
=========

def f : IO Unit := do
  try
  catch ex =>
    throw ex

---

(source_file
  (def (identifier) (apply (identifier) (identifier))
    (do))
      (ERROR
        (apply (identifier) (identifier))
        (ERROR) (throw (identifier))))

===========
Try/Finally
===========

def f : IO Unit := do
  try
    println! "foo"
  finally
    println! "bar"

---

(source_file
  (def (identifier) (apply (identifier) (identifier))
    (do
      (try
        (apply (identifier) (string))
        (finally
          (apply (identifier) (string)))))))

=================
Try/Catch/Finally
=================

def f : IO Unit := do
  try
    println! "foo"
  catch ex =>
    throw ex
  finally
    println! "bar"

---

(source_file
  (def (identifier) (apply (identifier) (identifier))
    (do
      (try
        (apply (identifier) (string))
        (catch (identifier) (throw (identifier)))
        (finally (apply (identifier) (string)))))))

===================
No Catch or Finally
===================

def f : IO Unit := do
  try
    println! "foo"

---

(source_file
  (def (identifier) (apply (identifier) (identifier))
    (do)) (ERROR (apply (identifier) (string))))

======
Return
======

def f : Nat := do
  return 3

---

(source_file
  (def (identifier) (identifier) (do (return (number)))))

==============
Return Nothing
==============

def f : Unit := do
  return

---

(source_file
  (def (identifier) (identifier) (do (return))))
