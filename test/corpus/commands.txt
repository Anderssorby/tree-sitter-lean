=========
#commands
=========

#check 2+2
#eval 2+2
#reduce 2+2

---

(source_file
  (hash_command (binary_expression (number) (number)))
  (hash_command (binary_expression (number) (number)))
  (hash_command (binary_expression (number) (number))))

===================
Same Line #commands
===================

#eval id 2 #eval 5

---

(source_file
  (hash_command (apply (identifier) (number)))
  (hash_command (number)))

=======
Prelude
=======

prelude
import Foo

---

(source_file
  (prelude)
  (import (dotted_name (identifier))))

====
Open
====

open Foo

---

(source_file (open (identifier)))

======
Import
======

import Foo

---

(source_file (import (dotted_name (identifier))))

=============
Import Nested
=============

import Foo.Bar.Baz

---

(source_file (import (dotted_name (identifier) (identifier) (identifier))))

=======
Example
=======

example : (fun x => x * 2) 4 < 3 = false := rfl

---

(source_file
  (example
    (binary_expression
      (comparison
        (apply
          (lambda (parameters (identifier))
            (binary_expression (identifier) (number))) (number))
        (number))
      (false))
    (identifier)))

==============
Inductive Type
==============

inductive FooBar where
  | foo    : Foo
  | bar    : Bar

---

(source_file
  (inductive_type
    name: (identifier)
    constructors:
      (constructor
        name: (identifier)
        type: (identifier))
    constructors:
      (constructor
        name: (identifier)
        type: (identifier))))

=======================
Inductive Type One Line
=======================

inductive Bit | bit0 | bit1

---

(source_file
  (inductive_type
    name: (identifier)
    constructors:
      (constructor
        name: (identifier))
    constructors:
      (constructor
        name: (identifier))))

================================
Inductive Type Superfluous Where
================================

inductive Bit where | bit0 | bit1

---

(source_file
  (inductive_type
    name: (identifier)
    constructors:
      (constructor
        name: (identifier))
    constructors:
      (constructor
        name: (identifier))))

========
Instance
========

instance : ToString Foo where
  toString (d : Foo) : String := "Foo"

---

(source_file
  (instance
    class:
      (apply
        name: (identifier)
        arguments: (identifier))
    fields:
      (instance_field
        name: (identifier)
        parameters:
          (parameters
            name: (identifier)
            type: (identifier))
        return_type: (identifier)
        body: (string))))

==============
Named Instance
==============

instance toStringFoo : ToString Foo where
  toString (d : Foo) : String := "Foo"

---

(source_file
  (instance
    name: (identifier)
    class:
      (apply
        name: (identifier)
        arguments: (identifier))
    fields:
      (instance_field
        name: (identifier)
        parameters:
          (parameters
            name: (identifier)
            type: (identifier))
        return_type: (identifier)
        body: (string))))

===================================
Instance With Inductive Constructor
===================================

instance : Inhabited Nat := ⟨0⟩

---

(source_file
  (instance
    class:
      (apply
        name: (identifier)
        arguments: (identifier))
    body: (inductive_constructor (number))))
