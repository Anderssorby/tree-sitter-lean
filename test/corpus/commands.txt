=========
#commands
=========

#check 2+2
#eval 2+2
#reduce 2+2
#print inferInstance

---

(module
  (hash_command (binary_expression (number) (number)))
  (hash_command (binary_expression (number) (number)))
  (hash_command (binary_expression (number) (number)))
  (hash_command (identifier)))

===================
Same Line #commands
===================

#eval id 2 #eval 5

---

(module
  (hash_command (apply (identifier) (number)))
  (hash_command (number)))

==============
#check_failure
==============

#check_failure (inferInstance : Inhabited (Nat Ã— _))

---

(module
  (hash_command
    (coe
      term: (identifier)
      type:
        (apply
          name: (identifier)
          arguments: (product_type (identifier) (identifier))))))

=======
Prelude
=======

prelude
import Foo

---

(module
  (prelude)
  (import
    module: (identifier)))

====
Open
====

open Foo
open Foo.Bar

---

(module
  (open
    namespace: (identifier))
  (open
    namespace: (identifier)
    namespace: (identifier)))

======
Import
======

import Foo

---

(module
  (import
    module: (identifier)))

=============
Import Nested
=============

import Foo.Bar.Baz

---

(module
  (import
    module: (identifier)
    module: (identifier)
    module: (identifier)))

======
Export
======

export Foo (bar baz)

---

(module
  (export
    class: (identifier)
    (identifier)
    (identifier)))

============
Empty Export
============

export Foo ()

---

(module (ERROR (identifier)))

========
Constant
========

constant A : Type
constant A : Type -> Type

---

(module
  (constant
    name: (identifier)
    type: (identifier))
  (constant
    name: (identifier)
    type: (function_type (identifier) (identifier))))

==========================
Constant With Missing Type
==========================

constant B

---

(module (ERROR (identifier)))

==========================
Constant With Missing Name
==========================

constant

---

(module (ERROR))

========
Universe
========

universe t
universe u v w

---

(module
  (universe (identifier))
  (universe (identifier) (identifier) (identifier)))

==========================
Universe With Missing Name
==========================

universe

---

(module (universe (MISSING identifier)))
