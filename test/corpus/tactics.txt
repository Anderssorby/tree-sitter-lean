========================
Theorem With Tactic Body
========================

theorem foo {m n : Nat} : 2 * m + 2 * n = 2 * (n + m) := by
  rewrite Nat.add_comm
  exact (Nat.left_distrib 2 n m).symm

---

(module
  (theorem
    name: (identifier)
    parameters:
      (parameters
        (implicit_parameter
          name: (identifier)
          name: (identifier)
          type: (identifier)))
    type:
      (binary_expression
        (binary_expression
          (binary_expression (number) (identifier))
          (binary_expression (number) (identifier)))
        (binary_expression
          (number)
          (binary_expression (identifier) (identifier))))
    body:
      (tactics
        (rewrite
          (field_of
            term: (identifier)
            name: (identifier)))
        (term
          (field_of
            term:
              (apply
                name:
                  (field_of
                    term: (identifier)
                    name: (identifier))
                arguments: (number)
                arguments: (identifier)
                arguments: (identifier))
            name: (identifier))))))

=================
Tactic Expression
=================

variable {m n : Nat}
#check (by
  rewrite Nat.add_comm
  exact (Nat.left_distrib 2 n m).symm : 2 * m + 2 * n = 2 * (n + m))

---

(module
  (variable_declaration
    (implicit_parameter
      name: (identifier)
      name: (identifier)
      type: (identifier)))
  (hash_command
    (coe
      term:
        (tactics
          (rewrite
            (field_of
              term: (identifier)
              name: (identifier)))
          (term
            (field_of
              term:
                (apply
                  name:
                    (field_of
                      term: (identifier)
                      name: (identifier))
                  arguments: (number)
                  arguments: (identifier)
                  arguments: (identifier))
              name: (identifier))))
        type:
          (binary_expression
            (binary_expression
              (binary_expression (number) (identifier))
              (binary_expression (number) (identifier)))
            (binary_expression
              (number)
              (binary_expression (identifier) (identifier)))))))
