======
Number
======

#eval 2

---

(source_file (hash_command (number)))

======
String
======

#eval "foo"

---

(source_file (hash_command (string)))

=======
Product
=======

#check (10, "foo", 30, 40)

---

(source_file (hash_command (product (number) (string) (number) (number))))

=======
If/Then
=======

#eval if true then "foo"

---

(source_file (hash_command (conditional (identifier) (string))))

============
If/Then/Else
============

#eval if true then "foo" else "bar"

---

(source_file (hash_command (conditional (identifier) (string) (string))))

===================
Nested If/Then/Else
===================

#eval if true then if false then "foo" else "bar" else "baz"

---

(source_file
  (hash_command
    (conditional (identifier)
      (conditional (identifier) (string) (string))
      (string))))

==================
Binary Expressions
==================

#eval 2 + 3
#eval 2 - 3
#eval 2 = 3
#eval 2 â‰  3
#eval "foo" ++ "bar"

---

(source_file
  (hash_command (binary_expression (number) (number)))
  (hash_command (binary_expression (number) (number)))
  (hash_command (binary_expression (number) (number)))
  (hash_command (binary_expression (number) (number)))
  (hash_command (binary_expression (string) (string))))

==========
Comparison
==========

#eval 2 < 3
#eval 2 > 3

---

(source_file
  (hash_command (comparison (number) (number)))
  (hash_command (comparison (number) (number))))

=====================
Comparison Precedence
=====================

#check id 2 < 3

---

(source_file (hash_command
  (comparison
    (apply (identifier) (number))
    (number))))

===========================
Multiple Function Arguments
===========================

#check foo 2 3 4

---

(source_file
  (hash_command
    (apply (identifier) (number) (number) (number))))

============
Field Access
============

#check FooBar.foo

---

(source_file
  (hash_command (element_of (identifier) (identifier))))

=====
Match
=====

def foo (d : Bar) : Baz :=
  match d with
  | quux    => 1

---

(source_file
  (def (identifier) (parameter_list (annotated (identifier) (identifier)))
    (identifier)
    (match (identifier) (pattern (identifier) (number)))))

=============
$ Application
=============

#eval foo bar (baz (1 + 1))
#eval foo bar $ baz (1 + 1)
#eval foo bar $ baz $ 1 + 1

---

(source_file
  (hash_command
    (apply (identifier) (identifier)
      (apply (identifier) (binary_expression (number) (number)))))
  (hash_command
    (apply (apply (identifier) (identifier))
      (apply (identifier) (binary_expression (number) (number)))))
  (hash_command
    (apply (apply (identifier) (identifier))
      (apply (identifier) (binary_expression (number) (number))))))
